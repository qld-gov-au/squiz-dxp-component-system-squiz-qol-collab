import fsPromises from 'fs/promises';
import fs from 'fs';

/**
 * A function to create a .json file to safely store the retrieved API data.
 * @param {Array} fileData All of the data from the API requests.
 * @param {String} fileName Name of the file to create.
 */
export default async function writeJsonFile(fileData, fileName, prettyOutput = false) {
    // console.log(fileData.length);
    try {
      
      if (prettyOutput) {
          await fsPromises.writeFile(fileName, JSON.stringify(fileData,null,2));
      } else {
          await fsPromises.writeFile(fileName, JSON.stringify(fileData));
      }
  
      console.log('-----------------------------------------------');
      console.log(`${fileName} was successfully created.`);
      console.log('-----------------------------------------------');
    } catch (error) {
      console.error(error);
    }
  }


export async function getComponentNames(dirPath){
    const result = [];

    await fs.readdirSync(dirPath).forEach(file => {      
        result.push(file);
    });

    return result.filter(item => item !== '01_hello-world');
}

export async function getComponentData(directoryArr,inputPath) {
    return await Promise.all(directoryArr.map( async (dirName) => {
        const outputObj = {};
        const fileName = `${inputPath}/${dirName}/manifest.json`;

        const someFile = await fsPromises.readFile(fileName,'utf8').catch((err) => {
        console.log(err);
        throw new Error(`${dirName} does not contain a manifest`);
        });

        const output = JSON.parse(someFile);
        //console.log('output:', output );
                
        outputObj.displayName = output.displayName ?? '';
        outputObj.name = output.name ?? '';
        outputObj.version = output.version ?? '';


        const varKeys = output.functions[0].input.properties;
        outputObj.vars = varKeys !== undefined ? Object.keys(varKeys) : {};  

        return outputObj;        
    }));
}

export async function renderTemplate(template,componentName,displayName,version = 'v0.0.1'){    
    let finalOutput = template.replace(/qgds-bs5-local\/cmp-replace-name/g,`qgds-bs5-local/${componentName}`);
    finalOutput = finalOutput.replace(/cmp-replace-version/,`${version}`);
    finalOutput = `// this file is auto-generated by the build-component-toc.js script\r\n` + finalOutput.replace(/cmp-replace-name-heading/g,`${displayName}`);  

    return finalOutput;
}

export async function createExampleTemplates(componentData,template,outputPath){

    componentData.map(async component => {

        const displayName = component.displayName ?? '';
        const componentName = component.name ?? '';
        const version = component.version ?? '';
        const outputTemplate = await renderTemplate(template,componentName,displayName,version);
        const templateFileName = `${outputPath}/${componentName}.js`;

        await fsPromises.writeFile(templateFileName, outputTemplate);
    });
}
  
export async function createTocTemplate(componentData,template,outputPath){
    const tocList = componentData.map(component => {
        const displayName = component.displayName ?? ''; 
        const componentName = component.name ?? '';
        
        return tocItemTemplate(componentName,displayName);
    }).join('\r\n');


    const tocNameList = componentData.map(item => `\t'${item.name}'`).join(',\n');

    const templateFileName = `${outputPath}/toc.js`;
    const outputTemplate = `// this file is auto-generated by the build-component-toc.js script\r\n` + template.replace(/cmp-toc-replacement/,tocList).replace(/cmp-toc-names-replacement/,tocNameList);

    await fsPromises.writeFile(templateFileName, outputTemplate);
}

// the wacky spacing is deliberate so the generated template markup looks nice
export const tocItemTemplate = (componentName,displayName) => {
    return `                    <li class="nav-item">
                        <a class="nav-link" href="/${componentName}">${displayName}</a>
                      </li>`;
};

export async function createComponentIndex(componentData,outputPath){
    //export {default as CardDynamic} from './card-dynamic.js'

    const componentList = componentData.map(component => {
        const { name } = component;
        const nameStrArr = name.split('-');
        const componentFnName = nameStrArr.map( word => {
            return word[0].toUpperCase() + word.substring(1);
        }).join('');
        //const componentFnName = displayName.replace(' ','').replace('Component','');        
        //const componentFnName = name.replace('-','');//.replace('Component','');        
        //return tocItemTemplate(componentName,displayName);
        return `export {default as ${componentFnName}} from './${name}.js'`;

    }).join('\r\n');

    const outputTemplate = `// this file is auto-generated by the build-component-toc.js script\r\n` + componentList;
    const templateFileName = `${outputPath}/component-index.js`;

    await fsPromises.writeFile(templateFileName, outputTemplate);
}